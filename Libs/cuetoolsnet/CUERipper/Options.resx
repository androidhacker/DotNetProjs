<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAYWFhAGNiYQBkZGMAZWRjAGtqaABramoAa2trAGxragBtbW0Abm1sAG5ubgBvb28AcW9sAHJx
        cQB2dHEAfnt3AHl5eQCAgIAAhYWFAIaGhQCHh4YAiomIAI+OjQCUkIoAkJCPAJKQjgCTko8AlpWUAJuX
        kgCdmZMAnZyZAJycnACgm5QAoJ2ZAKKemACqpZ8AoaGhAKOiogClpaUApqamAKenpwCpp6UAq6iiAK+r
        pQCoqKgAqqqqAKyqqACsrKwAra2sAK+urQC1sq0AubOrALu1rQC8tqwAvbevALCwsACxsbEAsrKyALW0
        swC1tbUAt7e3ALu3sQC+urUAubm5ALq6ugC8vLwAvb29AL6+vgC/v78AwbuzAMK7sgDCvLQAw721AMa/
        tQDIwbcAwcC/AMvDuQDMxLoAysW/AMzFvADOx70A0Mi+ANHJvgDQyb8A0cq/AMDAwADBwcEAwsLBAMPC
        wQDCwsIAw8PDAMTEwwDFxMMAx8XCAMTExADFxcUAxsbGAMfHxgDHx8cAy8fCAMnHxADPysMAycjGAM7K
        xADIyMgAycnJAMrKyADLy8sAzMzMAM3NzQDOzc0Azs7OAM/PzwDRy8EA0czHANHOyQDR0dEA0tLSANTU
        1ADV1dUA1tbWANjY2ADZ2dkA29vbANzc3ADd3d0A3t7eAOLi4gDk5OQA5eXlAOfn5wDp6ekA7e3tAE9O
        TgBcAF4AIOSDBQEAAABgAoQF5AioAGzy+nYANvp2AAAAAAAAAAAAAAAAADb6dmAJqABSSJN2AAAAAAIQ
        AAAMC6gAAQAAABgAAAAAAAAASAmoAEIAAAAAAAAALAmoAAAAAAAAAAAAAAAAAAAAAAAMAAAAAgAAAAEB
        AAAAAAAAAAAAAAAAAAACAAAAZAAaAmgChAV3tCIAAAAAAGgChAUFAAAAhAmoACosk3a8BQAAAAAAwIj6
        +naDY3B2AAA6AwAAAACcAToDrAmoAD7TOAAHABoApBnqAP0D+naRJZN2vAUAAAAAAAAAAAAAAAAAANgJ
        qABA8VMDdQz/dQO18T0gN+/G/3UQ//////9xx//FyeA4ALl5N57yma+ama+a8pryma8gAAAAr5rymcng
        OAAkCqgAHIM7AAwKqACx4DgAGAAAAAEAAADyma+ama+a8q+a8pma8pmv8pmvmpmvmvKa8pmvr5rymRYA
        AAAWAAAADAuoAIgKqACH4TgAwGs+ABYAAAAMC6gAFgAAAAAANgAAADYAAAA2AET/YQFE/2EBRP9hAUT/
        YQEw/2EBzP5hAcz+YQEw/2EBqGI+ACAjOACoYD4AAQAAAK+a8pmsCqgAvD1NALwFAABA8VMDFgAAALgK
        qAAAAAAAAAAAAAAAJA8NIQAAAAAAAAAAAEdOUxVDOgNTTTYAAAAAACIMCksWbGMISgKGEAAAAD5CfygU
        E19aCQ4odhIYAAA/KHhgbHVqY21gQ2wLHgAAAD9gV2BjLilXRDwuHQAALxwmcWFtKkhGH1dCQAYEBUWA
        dmFuOUYAAEYtWj1WdgFchHlqcCc3AABJMF9BYX4HZ11Mem5CGzQ1H1tabhkXGgAAZHdtakEgJVphVz0r
        AAAAaFx9d3t8eXd7dmxpESMAAHN9hXxYRHl3ODFsgz0sAAAAdG9rVFl/fjtRMikzAAAAAAByVVVigoEy
        U1JQAAAAAAAAAAAAZmVeTwAAAAAAAPw/AADgBwAAwAMAAIABAACAAQAAwAMAAAAAAAABgAAAAYAAAAAA
        AADAAwAAgAEAAIABAADAAwAA4AcAAPw/AAA=
</value>
  </data>
</root>